@use "sass:color";
@use "sass:map";
@use './variables' as *;

/**
 * Mixins
 *
 * Reusable style patterns to maintain consistency and reduce code duplication
 */

// Responsive breakpoint mixin
@mixin respond-to($breakpoint) {
  @if $breakpoint == "sm" {
    @media (min-width: 576px) { @content; }
  }

 @else if $breakpoint == "md" {
    @media (min-width: 768px) { @content; }
  }

 @else if $breakpoint == "lg" {
    @media (min-width: 992px) { @content; }
  }

 @else if $breakpoint == "xl" {
    @media (min-width: 1200px) { @content; }
  }
}

// Media query mixins
@mixin breakpoint-up($breakpoint) {
  @media (min-width: map.get($breakpoints, $breakpoint)) {
    @content;
  }
}

@mixin breakpoint-down($breakpoint) {
  @media (max-width: map.get($breakpoints, $breakpoint)) {
    @content;
  }
}

// Flexbox row with optional wrapping and alignment
@mixin flex-row($wrap: nowrap, $justify: flex-start, $align: center, $gap: $spacing-base) {
  display: flex;
  flex-flow: row $wrap;
  justify-content: $justify;
  align-items: $align;
  gap: $gap;
}

// Flexbox column
@mixin flex-column($justify: flex-start, $align: stretch, $gap: $spacing-base) {
  display: flex;
  flex-direction: column;
  justify-content: $justify;
  align-items: $align;
  gap: $gap;
}

// Flexbox mixins
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

// Grid layout mixin with responsive columns
@mixin grid-layout($min-width: 200px, $gap: var(--greenova-spacing)) {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax($min-width, 1fr));
  gap: $gap;
}

// Grid mixins
@mixin grid-columns($columns: 12, $gap: var(--greenova-spacing-base)) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: $gap;
}

// Typography mixins
@mixin font-size($size) {
  font-size: map-get($font-sizes, $size);
}

@mixin line-clamp($lines) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

// Card style mixin
@mixin card($padding: $padding-base, $bg: $background-secondary) {
  padding: $padding;
  background-color: $bg;
  border-radius: $border-radius-base;
  box-shadow: $shadow-sm;
}

// Button mixin
@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: $padding-sm $padding-base;
  border-radius: $border-radius-base;
  font-size: $font-size-sm;
  font-weight: $font-weight-bold;
  line-height: 1;
  text-decoration: none;
  cursor: pointer;
  transition: all $transition-base;
}

// Status badge mixin
@mixin status-badge($type) {
  display: inline-block;
  padding: $padding-xs $padding-sm;
  border-radius: $border-radius-sm;
  font-size: $font-size-xs;
  font-weight: $font-weight-bold;
  line-height: 1;
  text-align: center;

  @if $type == 'success' {
    background: $status-success;
    color: $text-primary-light;
  }

  @else if $type == 'warning' {
    background: $status-warning;
    color: $text-primary-light;
  }

  @else if $type == 'info' {
    background: $status-info;
    color: $text-primary-dark;
  }
}

// Truncate text with ellipsis
@mixin truncate($width: 100%) {
  max-width: $width;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

// Form field mixin
@mixin form-field {
  width: 100%;
  padding: var(--greenova-padding-sm);
  border: 1px solid var(--greenova-beige-secondary);
  border-radius: var(--greenova-border-radius-sm);
  font-size: var(--greenova-text-size-sm);
  line-height: var(--greenova-line-height);
  transition: border-color var(--greenova-transition);

  &:focus {
    outline: none;
    border-color: var(--greenova-green-primary);
  }
}

// Visually hidden mixin (accessibility)
@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

// Loading spinner mixin
@mixin loading-spinner($size: 24px, $color: $green-primary) {
  width: $size;
  height: $size;
  border: 2px solid rgba(color.red($color), color.green($color), color.blue($color), 30%);
  border-top-color: $color;
  border-radius: 50%;
  animation: spin 0.8s linear infinite;
}

// Animations
@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}
